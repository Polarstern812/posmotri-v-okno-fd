*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  block-size: 100%;
}

.page {
  inline-size: 1200px;
  block-size: 100%;

  margin: auto;
  color: #fff;

  font-family: 'Fira Sans Condensed', sans-serif;
  font-size: 18px;
  background-color: #1b1919;

  display: flex; 
  justify-content: center;
  align-items: center;
}

h1,
h2,
h3,
h4,
p,
ul,
ol,
li,
blockquote,
fieldset {
  margin: 0;
  padding: 0;

  border: none;
}

ul,
ol {
  list-style: none;
}

/* Кастомный скроллбар */
.custom-scrollbar::-webkit-scrollbar {
  width: 4px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: rgb(217 217 217 / 10%);
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background-color: #D9D9D9;
}



/*Здравствуйте!
Извините, я случайно отправила работу на проверку (когда пыталась посмотреть замечания с телефона)*/



.content {
 width: 100%;
 /*max-height: 100%;
  height: 534px;*/

  display: grid;
  grid-template-columns: 711px 399px;
  /*grid-template-rows: 1fr;*/
  align-items: end;
  gap: 30px;
  grid-template-areas: "result content__details";

  /*align-self: center;*/
  padding: 133px 30px;
}


.result {
  /*width: 711px; убрали ширину для блока, т.к. количество вложенных элементов может измениться */
  /*height: 456px;*/
  /*width: 100%;*/
  /*height: auto;*/
  grid-area: result;

  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 16px;

  /*margin-top: 78px;*/
}

/*Задайте размеры контейнеру .result__video-container и добавьте отступ снизу.*/
.result__video-container {
 width: 711px;
 height: 386px;

 display: block;
 /*margin-bottom: 16px;*/

 position: relative;
}

/*Поместите видео в этот контейнер так, чтобы оно занимало всю ширину и высоту и не выходило за пределы. Используйте object-fit.*/
.result__video {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
  /*border: none;*/
}

/*расположить элементы .search-form в строку, 
пропорционально распределить между ними свободное пространство и 
прижать их ...к началу??? контейнера*/
.search-form {
  /*width: 711px;
  height: 54px;*/

  /*display: grid;
  justify-content: start;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 40px;
  height: 54px;
  width: 100%;
  align-items: end;*/

  display: flex;
  gap: 40px;
  flex-wrap: nowrap;
  justify-content: space-between;
  /*align-items: end;*/
 
  /*padding-top: 11px; в нем нет необходимости*/
}

/*Строка с кнопкой : Создаем с помощью флексбокса строку с двумя элементами — fieldset и кнопкой*/
.search-form__fieldset {
 border: none; /*сбрасываем стандартной рамки*/

 display: flex;
 flex-direction: column;
 gap: 8px;
 /*align-self: end;*/
 align-items: start;
}

/*Оформите текст элементов .search-form__fieldset-title. Обратите внимание на вес шрифта, размер, отступы.*/
.search-form__fieldset-title {
  font-weight: 400;
  font-size: 18px;
  line-height: 100%;
  letter-spacing: normal;
  
  /*padding-top: 2px;*/
  /*padding-bottom: 5px;*/
}

/*Задайте .search-form__label у инпутов для поиска городов и времени суток.
Расставьте элементы внутри .search-form__label в линию. Примените свойство display: flex;. 
Также вам пригодится правило width: fit-content;.*/
.search-form__label {
  display: flex;
  width: fit-content; /*адаптируем ширину элемента под размер его содержимого*/
  align-items: center; /*выравниваем элементы по центру поперечной оси*/
  justify-content: center;
  gap: 5px;

  line-height: 100%;

  cursor: pointer; /*Курсор pointer указывает пользователю, что элемент является кликабельным. Это улучшает пользовательский опыт, 
  так как визуально подсказывает, что нажимая на элемент, произойдет действие.*/
}

/*В отступе нет необходимости, удалили
.search-form__label-text {
  padding-bottom: 10px; 
  padding-left: 0px;
}*/

.visually-hidden {
  position: absolute;
  inline-size: 1px;
  block-size: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  white-space: nowrap;
}

/* текстовое поле ввода */
.search-form__textfield {
  min-width: 225px; /*фиксируем минимальную ширину для элемента, чтобы в случае изменения длины текста, 
  ширина блока смогла гибко растянуться*/
  min-height: 27px; /*фиксируем минимальную высоту для элемента, чтобы в случае изменения размера шрифта, 
  высота блока смогла гибко растянуться*/

  font-family: 'Fira Sans Condensed', sans-serif;
  font-weight: 400;
  font-size: 18px;
  line-height: 100%;
  letter-spacing: normal;

  background-color: transparent;
  color: #fff;
  /*color: #FFFFFFB2; используем для плейсхолдера - для подсказки*/

  appearance: none;
  border: none;
  
  /*border-width: 1px, 0px, 1px, 0px;
  border-width: 1px 0px;
  border-style: solid;
  border-color: #fff; */
  
  border-top: 1px solid #fff;
  border-bottom: 1px solid #fff; 
}

/*Когда элемент в фокусе — добавьте границу вокруг с использованием outline. 
У этого элемента нужно сбросить обводку в состоянии фокуса и вместо этого сделать границу у лейбла, который его окружает. 
Лейбл должен получать границу только когда поле находится в состоянии :focus-visible, но не :focus. 
Чтобы это реализовать, можно применить хитрую комбинацию(!) псевдоклассов на классе лейбла — :has(:focus-visible).*/

/*сбрасываем outline при focus на элемент*/
.search-form__textfield:focus {
  outline: none
}
/*.search-form__label:has(.search-form__textfield:focus) {
  outline: none;
}*/

.search-form__label:has(.search-form__textfield:focus-visible) {
  /*outline: none;*/
  border: solid 1px #fff;
}

/*Расположите чекбоксы в линию с помощью обёртки .search-form__checkbox-list. Используйте display: flex; и gap.*/
.search-form__checkbox-list {
  display: flex;
  gap: 15px; 
  align-items: center;
  justify-content: space-between;
}

.search-form__checkbox {
  padding: 2px;
}

/*стилизуем псевдо-чекбокс*/
.search-form__pseudo-checkbox {
  width: 19px;
  height: 19px;
  border: solid 1px #fff;

  display: flex;
  justify-content: center;
  align-items: center;
}


.search-form__pseudo-checkbox::after {
  width: 15px; /*18*/
  height: 15px;
  background-color: #fff;

  content: '';
  display: block;
  visibility: hidden; 
}

/*Когда чекбокс активен (псевдокласс :checked) — в нем должен отображаться псевдоэлемент, который стилизовали в ::after*/
input[type='checkbox']:checked + .search-form__pseudo-checkbox::after {
  visibility: visible;
}

/*Когда чекбокс в фокусе — добавим границу вокруг с использованием outline*/
.search-form__label:has(.search-form__checkbox:focus-visible) {
outline: 1px solid white;
outline-offset: 1px;
}

/*сделаем так, чтобы при наведении на чекбокс у текста появлялось подчёркивание............*/
.search-form__label:hover > .search-form__label-text {
text-decoration: underline;
}

/*Общий класс кнопки - зададим стили : границу, цвет, шрифт и прозрачный фон*/
.button {
min-height: 34px; /*используем фиксацию минимальной высоты для элемента, чтобы в случае изменения размера шрифта,
высота блока смогла гибко растянуться*/

border: solid 1px #fff;
background-color: transparent;

color: white;
font-family: 'Fira Sans Condensed', sans-serif;
font-weight: 700;
font-size: 18px;
line-height: 100%;
letter-spacing: normal;

text-align: center;
align-self: end;
}

/*кнопка 'найти', расположенная в форме*/
.search-form__submit-button {
  min-width: 194px; /*лучше использовать фиксацию минимальной ширины для элемента, чтобы в случае изменения длины текста,
  ширина блока смогла гибко растянуться*/
}

/*кнопка 'показать еще', расположенная в списке карточек*/
.more-button {
  min-width: 390px; /*лучше использовать фиксацию минимальной ширины для элемента, 
  чтобы в случае изменения длины текста ширина блока смогла гибко растянуться*/
  /*width: 100%;*/
}

.button:hover {
  text-decoration: underline;
}

.button:active {
  background: #545050;
}

.button:focus {
  outline: none;
}

.button:focus-visible {
  outline: 1px solid #fff;
  outline-offset: 1px;
}

button,
a,
input[type='checkbox'] {
  cursor: pointer;
}

/*Растянуть блок с заголовком .content__details на всю доступную ширину и высоту контейнера и 
добавить отступы между заголовком и зоной с карточками.*/
.content__details {
  width: 100%;
  height: 100%;
  
  grid-area: content__details;
  }
  
/* Оформите элемент .title и вложенный в него .content__accent. */
.title {
font-family: 'Oswald', sans-serif;
font-weight: 700;
font-size: 75px;
line-height: 94%;
letter-spacing: normal;
text-transform: uppercase;

padding-bottom: 26px /*...чтобы добавить ТЕ САМЫЕ отступы между заголовком и зоной с карточками.*/
}

.content__accent {
color: #545050;
}

.content__list-container {
/*width: 399px;*/
 width: 100%;
 height: 298px;

 overflow-y: auto; /*указали auto для того, чтобы скролл появлялся только при переполнении контейнера*/

 position: relative;

 /*padding-left: 2px;/*
 /*padding-right: 3px;*/
 /*padding: 3px 3px 2px 3px;*/
}

.content__list {
  display: flex;
  flex-direction: column;
  gap: 30px; /* задали отступы между карточками */
}

/*
.preloader-template {}

.preloader {}

.preloader-chasing-squares {}

.square {}

.cards-list-item-template {}
*/

.content__list-item {
/*Расстояние между элементами указали в флекс-контейнере родителя gap: 30px;*/
  padding: 0px 3px;
}

.content__list-item:last-of-type {
  margin-bottom: 33px;
} 

.content__card-link {
  text-decoration: none;
  color: white;
  display: block;
}

/*активная (выбранная карточка)*/
.content__card-link_current {
  background: #545050;
}

/*активное состояние кнопки (при нажатии и удержании карточки),
В состоянии :active у элемента появляется только фон, без рамки*/
.content__card-link:active {
  background: #545050;
}

.content__card-link:hover {
  text-decoration: underline;
}

/*сбрасываем рамку в состоянии фокуса*/ 
.content__card-link:focus {
  outline: none;
}

/*устанавливаем рамку в состоянии видимого фокуса*/
.content__card-link:focus-visible {
  outline: solid 1px  #fff;
  outline-offset: 1px;
}


/*Расположите элементы внутри контейнера .content__video-card в строку, прижав к началу контейнера по дополнительной оси.*/
.content__video-card {
 display: flex;
 align-items: flex-start;
 justify-content: space-between;
}

/*Сделайте так, чтобы .content__video-card-description-container занимал всё доступное пространство (не занятое картинкой). 
Вам поможет свойство flex-grow.*/
.content__video-card-description-container {
  /*width: 196px; /*нет необходимости задавать данному элементу ширину, т.к. его ширина зависит от вложенного в него контента.*/
  /*height: 103px;*/

  flex-grow: 1; /*располагаем Внутренне содержимое карточки в строку и растягиваем на всё оставшееся пространство до картинки)*/
}

/*Оформите текст .content__video-card-title и учтите возможность переполнения, заменяя излишний текст на “…”.*/
.content__video-card-title {
  max-width: 196px;
 /*max-width: 95%;*/

  font-family: 'Oswald', sans-serif;
  font-weight: 700;
  font-size: 30px;
  line-height: 100%;
  letter-spacing: normal;
  text-transform: uppercase;
  
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  
}

/*Обратите внимание на значение line-height для .content__video-card-description в макете. 
Здесь тоже нужно учесть возможность переполнения, для этого воспользуйтесь свойством line-clamp.*/
.content__video-card-description {
font-family: 'Fira Sans Condensed', sans-serif;
font-weight: 400;
font-size: 18px; 
line-height: 16.2px;
letter-spacing: normal;

display: -webkit-box;
-webkit-line-clamp: 1;
-webkit-box-orient: vertical;
/*line-clamp: 1;*/

padding-top: 4px;
}

/*Задайте размеры .content__video-card-thumbnail и расположите в них изображение так, 
чтобы оно закрывало весь элемент и было выровнено по центру. Используйте object-fit и object-position.*/
.content__video-card-thumbnail {
width: 194px;
height: 103px;

object-fit: cover; /*чтобы картинка без нарушения пропорций заполнила всю доступную область, обрезая всё ненужное.*/
object-position: center;

width: 49%;
aspect-ratio: 194/103;
flex-shrink: 0;
}

/*
.more-button-template {}

.error-template {}

.error {}

.error__title {}*/